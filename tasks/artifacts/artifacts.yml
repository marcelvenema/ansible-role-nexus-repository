---

#########################################################
## Sonatype Nexus Repository artifacts module          ##
#########################################################

# include task gather_nexus_repository_variables.yml
- name: Gather Nexus Repository variables...
  ansible.builtin.include_tasks: gather_nexus_repository_variables.yml
  when:
    - vault_address is defined
    - vault_token is defined
    - nexus_repository_secret_engine_name is defined
    - nexus_repository_vault_id is defined

# gather nexus repository variables
- name: Gather Nexus Repository variables...
  ansible.builtin.import_tasks: gather_nexus_repository_variables.yml

#########################################################
## Sonatype Nexus Repository artifacts import          ##
#########################################################
- name: Import artifacts
  when: action == "import_artifacts"
  block:

    # Validate local variables
    - name: Validate variables for Nexus Repository import_artifacts action...
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - nexus_repository_address
        - nexus_repository_username
        - nexus_repository_password
        - nexus_repository_name
        - nexus_repository_folder
        - source_folder

    # Test if repository name is valid.
    - name: Test if repository name is valid...
      ansible.builtin.uri:
        url: "{{ nexus_repository_address }}/service/rest/v1/repositories/{{ nexus_repository_name }}"
        method: GET
        user: "{{ nexus_repository_username }}"
        password: "{{ nexus_repository_password }}"
        force_basic_auth: yes
        return_content: yes
        validate_certs: "{{ nexus_repository_validate_certs | default(true) }}"
        body_format: json
        headers:
          accept: application/json
          Content-Type: application/json
      register: nexus_repository_status

    # Show custom error message if repository address is not valid.
    - name: Import artifacts - Information message.
      ansible.builtin.fail:
        msg: "Cannot find {{ nexus_repository_name }} on '{{ nexus_repository_address }}'..."
      when: nexus_repository_status.status != 200

    # Find files in source folder
    - name: "Find files in source folder '{{ source_folder }}'..."
      ansible.builtin.find:
        paths: "{{ source_folder }}"
        recurse: yes
        file_type: file
      register: source_files

    # Debug message
    - name: "Import artifacts - Information mesaage..."
      ansible.builtin.debug:
        msg: "Uploading {{ source_files.files | length }} file(s) to {{ nexus_repository_address }}..."

    # include task to upload each asset
    - name: "Start artifacts_import task..."
      ansible.builtin.include_tasks: artifacts_import.yml
      loop: "{{ source_files.files }}"
      loop_control:
        label: "{{ item }}"
      no_log: true

#########################################################
## Sonatype Nexus artifacts export                     ##
#########################################################

- name: Export artifacts
  when: action == "export_artifacts"
  block:

    # Validate local variables
    - name: Validate local variables for Nexus Repository export_artifacts action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - nexus_repository_address
        - nexus_repository_username
        - nexus_repository_password
        - nexus_repository_name
        - nexus_repository_folder
        - destination_folder

    # Test if repository name is valid.
    - name: Test if repository name is valid.
      ansible.builtin.uri:
        url: "{{ nexus_repository_address }}/service/rest/v1/repositories/{{ nexus_repository_name }}"
        method: GET
        user: "{{ nexus_repository_username }}"
        password: "{{ nexus_repository_password }}"
        force_basic_auth: yes
        return_content: yes
        validate_certs: "{{ nexus_repository_validate_certs | default(true) }}"
        body_format: json
        headers:
          accept: application/json
          Content-Type: application/json
      register: nexus_repository_status

    # Show custom error message if repository address is not valid.
    - name: Export artifacts - information message.
      ansible.builtin.fail:
        msg: "Cannot find {{ nexus_repository_name }} on '{{ nexus_repository_address }}'..."
      when: nexus_repository_status.status != 200

    # Ensure destination folder exists
    - name: "Ensure destination folder {{ destination_folder }} exists..."
      ansible.builtin.file:
        path: "{{ destination_folder }}"
        state: directory
        mode: "0755"

    # Set search query
    - name: Export artifacts - Create search query
      ansible.builtin.set_fact:
        search_query: "&q={{ nexus_repository_folder | regex_replace('/', '%2F') }}"
      when: nexus_repository_name is defined

    # Set continuation_token
    - name: Set continuation token for pagination
      ansible.builtin.set_fact:
        continuation_token: "firstPage"
        file_urls: []

    # include task to get assets from Nexus repository
    - name: "Get assets from Nexus repository ({{ nexus_repository_address }})..."
      ansible.builtin.import_tasks: artifacts_get_assets.yml
      until: continuation_token == "" or continuation_token is not defined

    # Show information message
    - name: Export artifacts - information message
      debug:
        msg:
          - "Total of {{ file_urls | length }} files found to export from repository {{ nexus_repository_name}} on {{ nexus_repository_address}}..."
          - "Downloading files to folder '{{ destination_folder }}'. This may take a while..."

    # include task to download each asset
    - name: "Start artifacts_export task..."
      ansible.builtin.include_tasks: artifacts_export.yml
      loop: "{{ file_urls }}"
      loop_control:
        label: "{{ item }}"
      no_log: true

#########################################################
## Sonatype Nexus artifacts sync                       ##
#########################################################

- name: Sync artifacts
  when: action == "sync_artifacts"
  block:

    # Validate local variables
    - name: Validate local variables for Nexus Repository sync_artifacts action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - nexus_repository_address
        - nexus_repository_username
        - nexus_repository_password

    # Show information message
    - name: This part is not (yet) implemented.
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play
