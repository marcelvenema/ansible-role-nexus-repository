---

#########################################################
## Configuration                                       ##
#########################################################

# Get port of nexus from role_container_ports
- name: Retrieve container port...
  ansible.builtin.set_fact:
    nexus_port: "{{ nexus_repository_vars.container.ports[0].split(':')[0] }}"

# Get IP address of Nexus Repository
- name: Register variable (nexus_repository_address)...
  ansible.builtin.set_fact:
    nexus_repository_address: "http://{{ ansible_default_ipv4.address }}:{{ nexus_port }}"

- name: Register variable (nexus_repository_vars.address)...
  ansible.builtin.set_fact:
    nexus_repository_vars: "{{ nexus_repository_vars | combine({'address': nexus_repository_address}, recursive=True) }}"

# Wait for Nexus website is available
- name: Wait for Nexus Repository website is available...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}"
    method: GET
    return_content: yes
  register: nexus_website
  until: nexus_website.status == 200
  retries: 20
  delay: 10

# Get podman service user from podman role
# TODO: create function in podman role to get podman service user
- name: Get Podman service user...
  ansible.builtin.set_fact:
    retrieved_podman_service_user: "podman"

# Get Nexus admin password from podman
- name: Gather Nexus Repository admin password...
  become: true
  become_user: "{{ retrieved_podman_service_user }}"
  ansible.builtin.command:
    cmd: "podman exec -it {{ nexus_repository_vars.container.name }} cat /nexus-data/admin.password"
  register: admin_password_result

# Set Nexus admin password
- name: Register Nexus Repository admin username and password...
  ansible.builtin.set_fact:
    nexus_repository_username: "admin"
    nexus_repository_password: "{{ admin_password_result.stdout }}"

# Wait for Nexus website is available
- name: Wait for Nexus Repository website is available...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}"
    method: GET
    return_content: yes
  register: nexus_website
  until: nexus_website.status == 200
  retries: 10
  delay: 10

# Change admin password to hide manual first login screen
- name: Change admin password for Nexus Repository...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}/service/rest/v1/security/users/admin/change-password"
    method: PUT
    user: "admin"
    password: "{{ admin_password_result.stdout }}"
    force_basic_auth: true
    headers:
      Content-Type: "text/plain"
    body: "{{ admin_password_result.stdout }}"
    return_content: false
    status_code: 200,204,400,403,404   # API typically returns 204 No Content on success

# Get license agreement
- name: Get license agreement for Nexus Repository OSS...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}/service/rest/v1/system/eula"
    method: GET
    user: "admin"
    password: "{{ admin_password_result.stdout }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    return_content: true
  register: eula_response

# Accept license agreement
- name: Accept license agreement for Nexus Repository OSS...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}/service/rest/v1/system/eula"
    method: POST
    user: "admin"
    password: "{{ admin_password_result.stdout }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body:
      accepted: true
      disclaimer: "{{ eula_response.json.disclaimer | string }}"
    body_format: json
    return_content: false
    status_code: 204,500
  register: eula_accept_response

# Enable anonymous access to Nexus Repository via api
- name: Enable anonymous access for Nexus Repository...
  ansible.builtin.uri:
    url: "{{ nexus_repository_vars.address }}/service/rest/v1/security/anonymous"
    method: PUT
    user: "admin"
    password: "{{ admin_password_result.stdout }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body:
      enabled: true
      userID: "anonymous"
      realmName: "NexusAuthorizingRealm"
    body_format: json
    return_content: false
    status_code: 200,403
  register: anonymous_access_response

#########################################################
## Automation user and password                        ##
#########################################################

# Create automation password if not provided
- name: Register automation password...
  ansible.builtin.set_fact:
    automation_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
  when: automation_password is not defined
 
# Create automation user in Nexus repository
# Use variables automation_username, automation_password and automation_e-mail if provided, else use default
- name: Create automation user for Nexus Repository...
  ansible.builtin.include_tasks: users.yml
  vars:
    action : create_user
    nexus_repository_user_username : "{{ automation_username | default('automation') }}"
    nexus_repository_user_password : "{{ automation_password }}"
    nexus_repository_user_firstname: "{{ automation_username | default('automation') }}"
    nexus_repository_user_lastname : "{{ automation_username | default('automation') }}"
    nexus_repository_user_email    : "{{ automation_email | default('automation@localhost') }}"
    nexus_repository_user_roles    : "nx-admin"
    # nexus_repository_username: # set in playbook
    # nexus_repository_password: # set in playbook
    # nexus_repository_address: # set in playbook
  ignore_errors: true

# Configure Vault for Nexus if Vault is present
- name: Configure Vault for Nexus Repository
  ansible.builtin.include_tasks: configure_vault.yml
  when:
    - vault_address is defined
    - vault_token is defined
