---

#########################################################
## Get Nexus Repository variables from Vault           ##
#########################################################
# Validate variables, get from Vault if not present

- name: Gather Nexus Repository variables...
  when: nexus_repository_initialized is not defined or nexus_repository_initialized is not true
  block:

    # Validate variables
    - name: Validate variables for Nexus Repository...
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - nexus_repository_vars.secrets.secret_engine_name
        - nexus_repository_vars.secrets.secret_name

    # NEXUS REPOSITORY
    # Set variable _secret_name to nexus_repository_name
    - name: Register variable (nexus_repository)...
      ansible.builtin.set_fact:
        _secret_engine_name: "{{ nexus_repository_vars.secrets.secret_engine_name }}"
        _secret_name: "{{ nexus_repository_vars.secrets.secret_name }}"
      no_log: true

    # NEXUS_REPOSITORY_ADDRESS
    # Set variable if not defined
    - name: "Register variable (nexus_repository_address)..."
      ansible.builtin.set_fact:
        nexus_repository_address: ""
      when: nexus_repository_address is not defined
      no_log: true

    # Get secrets from HashiCorp Vault
    - name: Get secret from Vault (nexus_repository_address)...
      ansible.builtin.include_role:
        name: vault
      vars:
        action: get_secret
        secret_engine_name: "{{ _secret_engine_name }}"
        secret_name: "{{ _secret_name }}"
        secret_key: "nexus_repository_address"
        secret_result: "nexus_repository_address"
      when: nexus_repository_address == ""

    # NEXUS_REPOSITORY_USERNAME
    # Set variable if not defined
    - name: "Register variable (nexus_repository_username)..."
      ansible.builtin.set_fact:
        nexus_repository_username: ""
      when: nexus_repository_username is not defined
      no_log: true

    # Get secrets from HashiCorp Vault
    - name: Get secret from Vault (nexus_repository_username)...
      ansible.builtin.include_role:
        name: vault
      vars:
        action: get_secret
        secret_engine_name: "{{ _secret_engine_name }}"
        secret_name: "{{ _secret_name }}"
        secret_key: "nexus_repository_username"
        secret_result: "nexus_repository_username"
      when: nexus_repository_username == ""

    # NEXUS_REPOSITORY_PASSWORD
    # Set variable if not defined
    - name: "Register variable (nexus_repository_password)..."
      ansible.builtin.set_fact:
        nexus_repository_password: ""
      when: nexus_repository_password is not defined
      no_log: true

    # Get secrets from HashiCorp Vault
    - name: Get secret from Vault (nexus_repository_password)...
      ansible.builtin.include_role:
        name: vault
      vars:
        action: get_secret
        secret_engine_name: "{{ _secret_engine_name }}"
        secret_name: "{{ _secret_name }}"
        secret_key: "nexus_repository_password"
        secret_result: "nexus_repository_password"
      when: nexus_repository_password == ""

    #########################################################
    ## Test connection to Nexus Repository                 ##
    #########################################################

    # Test if repository address is valid.
    - name: "Test if repository address is valid ({{ nexus_repository_address }})..."
      ansible.builtin.uri:
        url: "{{ nexus_repository_address }}/service/rest/v1/status"
        method: GET
        status_code: 200, 503
        user: "{{ nexus_repository_username }}"
        password: "{{ nexus_repository_password }}"
        force_basic_auth: true
        return_content: true
        body_format: json
        headers:
          accept: application/json
          Content-Type: application/json
      register: nexus_repository_status

    # Show custom error message if repository address is not valid.
    - name: Show information message
      ansible.builtin.fail:
        msg: "Repository address '{{ nexus_repository_address }}' or username/password is not valid..."
      when: nexus_repository_status.status != 200

    # Set variable nexus_repository_initialized to true
    # If true, gather_nexus_repository_variables.yml will not be executed again
    - name: Register variable (nexus_repository_initialized)...
      ansible.builtin.set_fact:
        nexus_repository_initialized: true
      no_log: true
