---

#########################################################
## Pre-installation                                    ##
#########################################################

# Validate variables
- name: Validate variables for action.
  ansible.builtin.assert:
    that: "{{ item }} is defined"
    fail_msg: "Required variable '{{ item }}' has not been provided."
    quiet: true
  with_items: 
    # should be defined in defaults/main.yml
    - nexus_repository_url

#########################################################
## Pre-installation platform check                     ##
#########################################################

# Gather installed packages
- name: Gather installed packages
  ansible.builtin.package_facts:
    manager: auto

# Bypass platform check if platform is defined
- name: Bypass platform check if platform is defined
  ansible.builtin.set_fact:
    platform_check: false
  when: platform is defined

# Override platform check if platform variable is defined.
- name: See on which platform it can be installed...
  ansible.builtin.set_fact:
    platform_check: true 
  when: platform is undefined 

# Set platform if podman is detected
- name: Set platform if podman is detected
  ansible.builtin.set_fact:
    platform: "podman"
    platform_check: false
  when:
    - '"podman" in ansible_facts.packages'
    - platform_check == true

# Set platform if kubernetes is detected
- name: Set platform if kubernetes is detected
  ansible.builtin.set_fact:
    platform: "kubernetes"
    platform_check: false
  when:
    - '"kubernetes" in ansible_facts.packages'
    - platform_check == true

# Set platform to host if no podman or no kubernetes is detected
- name: Set platform to host if no Podman or Kubernetes is detected
  ansible.builtin.set_fact:
    platform: "host"
  when: platform_check == true

# Clear variable
- name: Clear platform_check variable
  ansible.builtin.set_fact:
    platform_check: undefined 

#########################################################
## Pre-installation uninstall                          ##
#########################################################

# Set uninstall to false if not defined
- name: Set uninstall variable if set
  ansible.builtin.set_fact:
    uninstall: false
  when: uninstall is not defined

# Run uninstall if uninstall is set
- name: Run uninstall playbook if set
  ansible.builtin.include_tasks: uninstall.yml
  ignore_errors: true
  when: uninstall == true

#########################################################
## Installation                                        ##
#########################################################

#########################################################
## Installation on podman                              ##
#########################################################

- name: "Install {{ nexus_container_name }} repository on podman"
  when: platform == "podman"
  block:

    # Check if podman is detected
    - name: Check if podman is detected
      ansible.builtin.assert:
        that: '"podman" in ansible_facts.packages'
        fail_msg: "Podman is not installed. Please install Podman first. Cannot continue..."

    ##################################
    # Pre-installation folders       # 
    ##################################

    # Create folders from first part of container_volumes
    - name: Create data folders...
      ansible.builtin.file:
        path: "{{ item.split(':')[0] }}"
        state: directory
        owner: 200
        mode: "0755"
      with_items: "{{ nexus_container_volumes }}"

    ##################################
    # Import container image         # 
    ##################################
    # Pull container image, if failed try to use local file
    # local file can be http, https, ftp or local file

    # If tag is not defined, set value to latest
    - name: Validate repository_tag, set default
      ansible.builtin.set_fact:
        repository_tag: "latest"
      when: nexus_repository_tag is not defined or nexus_repository_tag == "" or nexus_repository_tag == none

    # Show information
    - name: Show information
      ansible.builtin.debug:
        msg: "Get container image from registry. this may take a while..."

    # Pull image from repository to local image repository. If failed, lookup local image file.
    - name: "Pull container image from repository {{ nexus_repository_url }}:{{ nexus_repository_tag }}"
      containers.podman.podman_image:
        name: "{{ nexus_repository_url }}"
        tag: "{{ nexus_repository_tag }}"
      register: pull_result
      ignore_errors: true

    # If pull failed, try to use local file
    - name: Install local image file
      when: pull_result is failed
      block:

        # Show information message
        - name: Show information message
          ansible.builtin.debug:
            msg: "Cannot pull from container repository, trying to load from file..."

        # Delete local temp file
        - name: "Delete local file /tmp/{{ nexus_container_name }}"
          ansible.builtin.file:
            path: "/tmp/{{ nexus_container_name }}.tar"
            state: absent

        # repository_url is a local container file, check if file exists on ansible host
        - name: Check if repository_url is a local container file
          ansible.builtin.stat:
            path: "{{ nexus_repository_url }}"
          register: repository_url_result
          delegate_to: localhost

       # Copy image file to destination if local file
        - name: Copy container image file to destination
          ansible.builtin.copy:
            src: "{{ nexus_repository_url }}"
            dest: "/tmp/{{ nexus_container_name }}.tar"
          when: 
            - repository_url_result.stat.exists == true

        # Download local file if http or https
        - name: "Download file from {{ nexus_repository_url }}"
          ansible.builtin.get_url:
            url: "{{ nexus_repository_url }}"
            dest: "/tmp/{{ nexus_container_name }}.tar"
          when: ("http" in nexus_repository_url) or ("ftp" in nexus_repository_url) # https is included
        
        # check if container file exists
        - name: "Check if /tmp/{{ nexus_container_name }}.tar exists..."
          ansible.builtin.stat:
            path: "/tmp/{{ nexus_container_name }}.tar"
          register: container_tar_result

        # Fail if image file not found
        - name: Fail if Vault container image file not found
          ansible.builtin.fail:
            msg: "Repository URL {{ nexus_repository_url }} not found. Container image file location not found. Cannot continue..."
          when: 
            - container_tar_result.stat.exists == false

        ##################################
        # Checksum image                 # 
        ##################################

        # If checksum contains :, split it in checksum and algorithm
        - name: Split checksum and algorithm
          ansible.builtin.set_fact:
            repository_checksum: "{{ nexus_repository_checksum.split(':')[1] }}"
            repository_checksum_algorithm: "{{ nexus_repository_checksum.split(':')[0] }}"
          when: nexus_repository_checksum is defined and ":" in nexus_repository_checksum

        # Get checksum of container file.tar
        - name: Get checksum of local container file
          ansible.builtin.stat:
            path: "/tmp/{{ nexus_container_name }}.tar"
            checksum_algorithm: "{{ naxus_repository_checksum_algorithm }}"
            get_checksum: yes
          register: checksum_result
          when : nexus_repository_checksum is defined 

        # Fail when checksum is not the same
        - name: Fail when checksum is not correct
          ansible.builtin.fail:
            msg: "Checksum of /tmp/{{ nexus_container_name }}.tar ({{ checksum_result.stat.checksum }}) is not the same as the provided checksum ({{ repository_checksum }}). Cannot continue..."
          when: 
            - nexus_repository_checksum is defined
            - checksum_result.stat.checksum != nexus_repository_checksum

        # Load image from file if pull failed
        - name: Import container image to podman
          ansible.builtin.command: "podman load -i /tmp/{{ nexus_container_name }}.tar"
          register: import_result

        # Cleanup image file
        - name: Cleanup container image file
          ansible.builtin.file:
            path: "/tmp/{{ nexus_container_name }}.tar"
            state: absent

    # Get image info from podman
    - name: Gather info on container image
      containers.podman.podman_image_info:
      register: images_info

    # Find image id
    - name: Parse image info, select container image id
      ansible.builtin.set_fact:
        image_id: "{{ images_info.images | selectattr('RepoTags', 'search', nexus_container_name) | map(attribute='Id') | first }}"

    ##################################
    # Create Nexus container         #
    ##################################

    # Create podman container
    - name: "Create container {{ nexus_container_name }} with id {{ image_id }}..."
      containers.podman.podman_container:
        name: "{{ nexus_container_name }}"
        image: "{{ image_id }}"
        ports: "{{ nexus_container_ports }}"
        volumes: "{{ nexus_container_volumes }}"
        restart_policy: always
 
    # Wait for Sonatype Nexus pod init to complete
    - name: Wait for container init to complete
      ansible.builtin.shell: "podman logs {{ nexus_container_name }} | grep 'Started Sonatype Nexus OSS'"
      register: nexus_pod_init
      until: nexus_pod_init.stdout.find("Started Sonatype Nexus OSS") != -1
      retries: 10
      delay: 15

    # Auto-start container on system boot
    - name: "Generate systemd unit file for container {{ nexus_container_name}}"
      containers.podman.podman_generate_systemd:
        name: "{{ nexus_container_name }}"
        new: true
        no_header: true
        dest: /etc/systemd/system

    # Reload systemd
    - name: Reload systemd
      ansible.builtin.systemd_service:
        daemon_reload: yes
        scope: system
    
    # Enable systemd service for container
    - name: "Enable systemd service for {{ nexus_container_name }} container"
      ansible.builtin.service:
        name: "container-{{ nexus_container_name }}.service"
        enabled: yes

#########################################################
## Installation via kubernetes                         ##
#########################################################

- name: Install Nexus repository on Kubernetes
  when: platform == "kubernetes"
  block:

    # Debug message
    - name: Debug message
      ansible.builtin.debug:
        msg: "Install Sonatype Nexus via kubernetes"

    # Show information message
    - name: This part is not (yet) implemented.
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Installation on host                                ##
#########################################################

- name: Install Nexus repository on host
  when: platform == "host"
  block:

    # Debug message
    - name: Debug message
      ansible.builtin.debug:
        msg: "Install Sonatype Nexus on host"

    # Show information message
    - name: This part is not (yet) implemented.
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Configuration                                       ##
#########################################################

# Configure Sonatype Nexus
- name: Configure Sonatype Nexus
  ansible.builtin.include_tasks: configure.yml 

#########################################################
## Post-install                                        ##
#########################################################

# Unset variables
- name: Unset variables
  ansible.builtin.set_fact:
    nexus_repository_url:
    nexus_repository_tag:
    nexus_repository_checksum:
    nexus_repository_checksum_algorithm:
    nexus_container_name:
    nexus_container_ports:
    nexus_container_volumes:

